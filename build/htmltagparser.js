// Generated by CoffeeScript 1.6.3
(function() {
  var HTMLTag, ParseError, UnknownTagError, html_tag_re, low_level_html_tag_parser, parse_html_tag, str_ok, tags,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  tags = {
    regular: 'a abbr address article aside audio b bdi bdo blockquote body button\
 canvas caption cite code colgroup datalist dd del details dfn div dl dt em\
 fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup\
 html i iframe ins kbd label legend li map mark menu meter nav noscript object\
 ol optgroup option output p pre progress q rp rt ruby s samp script section\
 select small span strong style sub summary sup table tbody td textarea tfoot\
 th thead time title tr u ul var video',
    "void": 'area base br col command embed hr img input keygen link meta param\
 source track wbr',
    obsolete: 'applet acronym bgsound dir frameset noframes isindex listing\
 nextid noembed plaintext rb strike xmp big blink center font marquee multicol\
 nobr spacer tt',
    obsolete_void: 'basefont frame'
  };

  tags.list = [tags.regular, tags["void"], tags.obsolete, tags.obsolete_void].join(' ').split(' ');

  html_tag_re = /^([\w\-]+)?([#]([\w\-]+))?((\.[\w\-]+)*)$/i;

  str_ok = function(s) {
    return (s != null) && ('string' === typeof s) && (s !== '');
  };

  low_level_html_tag_parser = function(tag) {
    /*
    [ 'p#id.class1.class2',  #0
    'p',                   #1
    '#id',                 #2
    'id',                  #3
    '.class1.class2',      #4
    '.class2',             #5
    index: 0,
    input: 'p#id.class1.class2' ]
    */

    var classes, id, name, _, _ref;
    _ref = tag.trim().match(html_tag_re), _ = _ref[0], name = _ref[1], _ = _ref[2], id = _ref[3], classes = _ref[4];
    return {
      tag: str_ok(name) ? name : 'div',
      id: id,
      classes: str_ok(classes) ? classes.split('.').slice(1) : []
    };
  };

  parse_html_tag = function(str) {
    var t, _ref;
    if (str.length === 0) {
      throw new ParseError('(empty string)');
    }
    if ((t = low_level_html_tag_parser(str)) == null) {
      throw new ParseError(tag);
    }
    if (_ref = t.tag, __indexOf.call(tags.list, _ref) < 0) {
      throw new UnknownTagError(t.tag);
    }
    return new HTMLTag(t.tag, t.id, t.classes);
  };

  /*
  @tag      the type of tag ( div, input, etc )
  @id       optional ID string ( '#my-form' --> 'my-form' )
  @classes  array of strings containing classes
  */


  HTMLTag = (function() {
    function HTMLTag(tag, id, classes) {
      this.tag = tag;
      this.id = id;
      this.classes = classes;
    }

    return HTMLTag;

  })();

  ParseError = (function(_super) {
    __extends(ParseError, _super);

    function ParseError(tag) {
      this.message = "[htmltagparser] Can't parse HTML tag: '" + tag + "'";
    }

    return ParseError;

  })(Error);

  UnknownTagError = (function(_super) {
    __extends(UnknownTagError, _super);

    function UnknownTagError(tag) {
      this.message = "[htmltagparser] Unknown HTML tag: '" + tag + "'";
    }

    return UnknownTagError;

  })(Error);

  parse_html_tag.ParseError;

  parse_html_tag.UnknownTagError;

  module.exports = parse_html_tag;

}).call(this);
